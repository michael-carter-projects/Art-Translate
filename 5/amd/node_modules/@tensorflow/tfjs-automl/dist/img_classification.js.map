{"version":3,"file":"img_classification.js","sourceRoot":"","sources":["../src/img_classification.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GraphModel, loadGraphModel} from '@tensorflow/tfjs-converter';\nimport {cast, div, expandDims, image, sub, Tensor, Tensor3D, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {ImageInput} from './types';\nimport {imageToTensor, loadDictionary} from './util';\n\nexport interface ImagePrediction {\n  prob: number;\n  label: string;\n}\n\nexport interface ImageClassificationOptions {\n  centerCrop: boolean;\n}\n\n/** Input size as expected by the model. */\nconst IMG_SIZE: [number, number] = [224, 224];\n// Constants used to normalize the image between -1 and 1.\nconst DIV_FACTOR = 127.5;\nconst SUB_FACTOR = 1;\n\nexport class ImageClassificationModel {\n  constructor(public graphModel: GraphModel, public dictionary: string[]) {}\n\n  async classify(input: ImageInput, options?: ImageClassificationOptions):\n      Promise<ImagePrediction[]> {\n    options = sanitizeOptions(options);\n\n    const scores = tidy(() => {\n      const preprocessedImg = this.preprocess(input, options);\n      return this.graphModel.predict(preprocessedImg) as Tensor;\n    });\n    const probabilities = await scores.data() as Float32Array;\n    scores.dispose();\n    const result = Array.from(probabilities)\n                       .map((prob, i) => ({label: this.dictionary[i], prob}));\n    return result;\n  }\n\n  private preprocess(input: ImageInput, options: ImageClassificationOptions) {\n    // Preprocessing involves center crop and normalizing between [-1, 1].\n    const img = imageToTensor(input);\n    const croppedImg = options.centerCrop ?\n        centerCropAndResize(img) :\n        expandDims(image.resizeBilinear(img, IMG_SIZE));\n    return sub(div(croppedImg, DIV_FACTOR), SUB_FACTOR);\n  }\n}\n\nexport async function loadImageClassification(modelUrl: string):\n    Promise<ImageClassificationModel> {\n  const [model, dict] =\n      await Promise.all([loadGraphModel(modelUrl), loadDictionary(modelUrl)]);\n  return new ImageClassificationModel(model, dict);\n}\n\nfunction sanitizeOptions(options: ImageClassificationOptions) {\n  options = options || {} as ImageClassificationOptions;\n  if (options.centerCrop == null) {\n    options.centerCrop = true;\n  }\n  return options;\n}\n\n/** Center crops an image */\nfunction centerCropAndResize(img: Tensor3D) {\n  return tidy(() => {\n    const [height, width] = img.shape.slice(0, 2);\n    let top = 0;\n    let left = 0;\n    if (height > width) {\n      top = (height - width) / 2;\n    } else {\n      left = (width - height) / 2;\n    }\n    const size = Math.min(width, height);\n    const boxes = [\n      [top / height, left / width, (top + size) / height, (left + size) / width]\n    ];\n    const boxIndices = [0];\n    return image.cropAndResize(\n        // tslint:disable-next-line\n        expandDims(cast(img, 'float32')) as Tensor4D, boxes, boxIndices,\n        IMG_SIZE);\n  });\n}\n"]}